---
// Pulled from starlight and edited to fit this theme. https://starlight.astro.build/components/asides/
import { AstroError } from 'astro/errors';
import { Icon } from 'astro-icon/components';

const asideVariants = ['note', 'tip', 'caution', 'danger'] as const;
const icons = { note: 'mdi:information-outline', tip: 'mdi:head-lightbulb-outline', caution: 'mdi:alert-outline', danger: 'mdi:alert-circle-outline' } as const;

// Default titles for each type of aside
const defaultTitles = {
	note: 'Note',
	tip: 'Tip',
	caution: 'Caution',
	danger: 'Danger',
} as const;

interface Props {
	type?: (typeof asideVariants)[number];
	title?: string;
}

let { type = 'note', title } = Astro.props;

if (!asideVariants.includes(type)) {
	throw new AstroError(
		'Invalid `type` prop passed to the `<Aside>` component.\n',
		`Received: ${JSON.stringify(type)}\n` +
			`Expected one of ${asideVariants.map((i) => JSON.stringify(i)).join(', ')}`
	);
}

// Fallback to default titles if no title is provided
if (!title) {
	title = defaultTitles[type];
}
---

<aside aria-label={title} 
    class={`p-4 border-l-4 text-[var(--aw-color-text-default)] rounded-[.25rem]
    ${type === 'note' ? 'border-[var(--aw-color-accent)] bg-[var(--aw-color-accent-50)] ' : ''}
    ${type === 'tip' ? 'border-[var(--aw-color-primary)] bg-[var(--aw-color-primary-50)]' : ''}
    ${type === 'caution' ? 'border-[var(--aw-color-yellow)] bg-[var(--aw-color-yellow-50)]' : ''}
    ${type === 'danger' ? 'border-[var(--aw-color-red)] bg-[var(--aw-color-red-50)]' : ''}`}>
    <p class="flex items-center gap-2 font-semibold text-lg text-[var(--color-asides-text-accent)]">
        <Icon name={icons[type]} class="text-xl" />
        {title}
    </p>
    <section class="mt-2">
        <slot />
    </section>
</aside>