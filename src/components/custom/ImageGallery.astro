---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import WidgetWrapper from '../ui/WidgetWrapper.astro';

interface Props {
  title?: string;
  subtitle?: string;
  galleryId?: string;
  items?: {
    src: ImageMetadata | { src: string };
    alt: string;
    type: 'image' | 'video';
    autoplay?: boolean;
    loop?: boolean;
    muted?: boolean;
  }[];
}

const { title, subtitle, items = [], galleryId = crypto.randomUUID() } = Astro.props;
---

<WidgetWrapper>
  {
    (title || subtitle) && (
      <div class="mb-8 text-center max-w-3xl mx-auto">
        {title && <h2 class="text-3xl md:text-4xl font-bold leading-tight mb-4">{title}</h2>}
        {subtitle && <p class="text-muted">{subtitle}</p>}
      </div>
    )
  }
  <div class={`grid gap-6 ${
    items.length < 3 
      ? 'grid-cols-1 sm:grid-cols-2' 
      : 'grid-cols-1 sm:grid-cols-2 lg:grid-cols-3'
  }`}>
    {
      items.map((item, index) => (
        <button 
          class="relative group overflow-hidden rounded-lg shadow-md hover:shadow-xl transition-all duration-300 cursor-pointer"
          onclick={`document.getElementById('${galleryId}-${index}').showModal()`}
        >
          {item.type === 'image' ? (
            <Image
              src={item.src}
              alt={item.alt}
              class="w-full h-64 object-cover transition-transform duration-300 group-hover:scale-105"
            />
          ) : (
            <div class="w-full h-64 overflow-hidden">
              <video
                src={item.src}
                autoplay={item.autoplay}
                loop={item.loop}
                muted={item.muted}
                playsinline
                class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
              />
            </div>
          )}
        </button>
        <dialog 
          id={`${galleryId}-${index}`} 
          class="backdrop:bg-black/70 backdrop:backdrop-blur-sm p-0 max-w-[90vw] max-h-[90vh] rounded-lg overflow-hidden bg-transparent w-full h-[90vh] mx-auto"
          data-index={index}
          data-gallery-id={galleryId}
          onclick="this.close()"
        >
          <div class="relative w-full h-full flex flex-col items-center justify-center" onclick="event.stopPropagation()">
            <button
              class="absolute right-2 top-2 bg-black/50 hover:bg-black/75 text-white p-2 rounded-full transition-colors z-20"
              onclick="this.closest('dialog').close()"
              aria-label="Close lightbox"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                <path d="M18 6l-12 12" />
                <path d="M6 6l12 12" />
              </svg>
            </button>

            <div class="flex items-center justify-center w-full h-full">
              {item.type === 'image' ? (
                <Image
                  src={item.src}
                  alt={item.alt}
                  class="max-w-full max-h-[85vh] object-contain mx-auto"
                />
              ) : (
                <video
                  src={item.src}
                  autoplay={item.autoplay}
                  loop={item.loop}
                  muted={item.muted}
                  controls
                  playsinline
                  class="max-w-full max-h-[85vh] object-contain mx-auto"
                />
              )}
            </div>

            <p class="text-white bg-black/75 px-4 py-2 rounded-lg text-center text-sm mt-2 mx-auto absolute bottom-4 left-1/2 -translate-x-1/2">
              {item.alt}
            </p>
            
            {index > 0 && (
              <button
                class="absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/75 text-white p-2 rounded-full transition-colors z-20"
                onclick={`event.stopPropagation(); document.getElementById('${galleryId}-${index}').close(); document.getElementById('${galleryId}-${index - 1}').showModal();`}
                aria-label="Previous image"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                  <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                  <path d="M15 6l-6 6l6 6" />
                </svg>
              </button>
            )}
            
            {index < items.length - 1 && (
              <button
                class="absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/75 text-white p-2 rounded-full transition-colors z-20"
                onclick={`event.stopPropagation(); document.getElementById('${galleryId}-${index}').close(); document.getElementById('${galleryId}-${index + 1}').showModal();`}
                aria-label="Next image"
              >
                <svg xmlns="http://www.w3.org/2000/svg" class="w-6 h-6" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                  <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                  <path d="M9 6l6 6l-6 6" />
                </svg>
              </button>
            )}
          </div>
        </dialog>
      ))
    }
  </div>
</WidgetWrapper>

<style>
  dialog::backdrop {
    animation: fade-in 0.3s ease-out;
  }
  
  dialog[open] {
    animation: scale-in 0.3s ease-out;
  }
  
  @keyframes scale-in {
    from {
      transform: scale(0.95);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }
  
  @keyframes fade-in {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<script>
  function navigateLightbox(currentIndex: number, direction: 'prev' | 'next') {
    const currentDialog = document.getElementById(`${galleryId}-${currentIndex}`) as HTMLDialogElement;
    const newIndex = direction === 'prev' ? currentIndex - 1 : currentIndex + 1;
    const newDialog = document.getElementById(`${galleryId}-${newIndex}`) as HTMLDialogElement;
    
    if (currentDialog && newDialog) {
      currentDialog.close();
      newDialog.showModal();
    }
  }

  // Handle keyboard navigation
  document.addEventListener('keydown', (e) => {
    const openDialog = document.querySelector('dialog[open]') as HTMLDialogElement;
    if (!openDialog) return;

    const currentIndex = parseInt(openDialog.dataset.index || '0');
    const totalImages = document.querySelectorAll('dialog').length;

    switch (e.key) {
      case 'Escape':
        openDialog.close();
        break;
      case 'ArrowLeft':
        if (currentIndex > 0) {
          navigateLightbox(currentIndex, 'prev');
        }
        break;
      case 'ArrowRight':
        if (currentIndex < totalImages - 1) {
          navigateLightbox(currentIndex, 'next');
        }
        break;
    }
  });
</script>